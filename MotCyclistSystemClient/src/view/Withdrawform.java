/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Dimension;
import java.awt.Font;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import model.AccountTransaction;
import model.SavingsAccount;
import service.AccountTransactionService;
import service.SavingsAccountService;

/**
 *
 * @author user
 */
public class Withdrawform extends javax.swing.JFrame {
    private SavingsAccountService savingsService;
    private AccountTransactionService transactionService;
    private final AccountsPage parent;

    /**
     * Creates new form Withdrawform
     */
    public Withdrawform(AccountsPage parent, String accountNumber) {
       this.parent = parent;
        initComponents();
        initializeServices();
        ACCTxt.setText(accountNumber);
        ACCTxt.setEditable(false);
        setLocationRelativeTo(parent);
    }
     private void initializeServices() {
        try {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 2325);
            savingsService = (SavingsAccountService) registry.lookup("SavingsAccountService");
            transactionService = (AccountTransactionService) registry.lookup("AccountTransactionService");
            if (savingsService == null || transactionService == null) {
                throw new Exception("Failed to lookup services");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Cannot connect to server: " + e.getMessage(), "Connection Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AmmountTxt = new javax.swing.JTextField();
        ACCTxt = new javax.swing.JTextField();
        WithtButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("ACC NUMBER:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("AMOUNT:");

        AmmountTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmmountTxtActionPerformed(evt);
            }
        });

        ACCTxt.setEditable(false);
        ACCTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACCTxtActionPerformed(evt);
            }
        });

        WithtButton.setText("WITHDRAW");
        WithtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithtButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 102, 255));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Withdraw");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel4)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AmmountTxt)
                    .addComponent(ACCTxt)
                    .addComponent(WithtButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                .addContainerGap(58, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ACCTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AmmountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(WithtButton)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AmmountTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmmountTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AmmountTxtActionPerformed

    private void WithtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithtButtonActionPerformed
        // TODO add your handling code here:
        try {
            String accountNumber = ACCTxt.getText().trim();
            String amountStr = AmmountTxt.getText().trim();

            if (accountNumber.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Account number is required.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (amountStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Amount is required.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double amount;
            try {
                amount = Double.parseDouble(amountStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Amount must be a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (amount <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be positive.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            SavingsAccount account = null;
            List<SavingsAccount> accounts = savingsService.findAll();
            for (SavingsAccount acc : accounts) {
                if (accountNumber.equals(acc.getAccountNumber())) {
                    account = acc;
                    break;
                }
            }
            if (account == null) {
                JOptionPane.showMessageDialog(this, "Account not found.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (amount > account.getBalance()) {
                JOptionPane.showMessageDialog(this, "Insufficient balance.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            account.setBalance(account.getBalance() - amount);
            savingsService.update(account);

            AccountTransaction transaction = new AccountTransaction();
            transaction.setAmount(amount);
            transaction.setType("WITHDRAWAL");
            transaction.setTransactionDate(new Date());
            transaction.setSavingsAccount(account);
            transactionService.save(transaction);

            // Generate and show receipt
            String accountName = account.getMotorcyclist() != null ? account.getMotorcyclist().getName() : "Unknown";
            String receipt = generateReceipt(accountNumber, accountName, amount, account.getBalance());
            showReceipt(receipt);

            parent.loadAccounts(); // Refresh parent table
            dispose(); // Close dialog
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error processing withdrawal: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_WithtButtonActionPerformed

    private void ACCTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACCTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ACCTxtActionPerformed
 private String generateReceipt(String accountNumber, String accountName, double amount, double newBalance) {
        StringBuilder receipt = new StringBuilder();
        receipt.append("=== WITHDRAWAL RECEIPT ===\n\n");
        receipt.append(String.format("%-20s: %s\n", "Account Number", accountNumber));
        receipt.append(String.format("%-20s: %s\n", "Account Name", accountName));
        receipt.append(String.format("%-20s: ZMW %.2f\n", "Withdrawal Amount", amount));
        receipt.append(String.format("%-20s: ZMW %.2f\n", "New Balance", newBalance));
        receipt.append(String.format("%-20s: %s\n", "Date", new Date()));
        receipt.append("\nThank you for banking with us!");
        return receipt.toString();
    }

    private void showReceipt(String receipt) {
        JTextArea textArea = new JTextArea(receipt);
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));

        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(400, 300));

        JOptionPane.showMessageDialog(this, scrollPane, "Withdrawal Receipt", JOptionPane.INFORMATION_MESSAGE);

        // Optional: Add print button functionality
        int print = JOptionPane.showConfirmDialog(this,
                "Would you like to print this receipt?",
                "Print Receipt",
                JOptionPane.YES_NO_OPTION);

        if (print == JOptionPane.YES_OPTION) {
            try {
                textArea.print();
            } catch (java.awt.print.PrinterException e) {
                JOptionPane.showMessageDialog(this,
                        "Failed to print receipt: " + e.getMessage(),
                        "Print Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ACCTxt;
    private javax.swing.JTextField AmmountTxt;
    private javax.swing.JButton WithtButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
